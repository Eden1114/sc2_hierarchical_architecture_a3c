Reuse2中每个线程里分别建立了Session，是不同的会话图，也分别地进行了global_variable_initializer 
所以尽管用了AutoReuse 但变量并不能同步更新（不是大佬a3c的实现基础）

Reuse3中每个线程里使用了同样的一个Session（在调用threading前就已建立这个Session），
所以每个线程使用的tf变量属于相同的会话图，
在进行了global_variable_initializer之后，使用threading启动了3个线程。
真正实现了用AutoReuse 使得变量同步更新（大佬a3c的实现基础）

总结：Reuse3的实现顺序：
1）创建多个对象
2）分别用各个对象所属的类的model方法，建立【多套】tf变量/节点/OP
（这里是个重点，虽然在python的变量系统中看起来是多套变量，但实际上每一套变量调用的都是tf会话图结构中的
唯一 一套变量，唯一的意思是说它们的值、所在内存空间和它们在tf图中的名字均一样）

3）开启【唯一的一个】Session （这步其实只要放在4之前就行，也就是说不一定在位置3，在最开始（创建tf节点之前）也行）
4）进行【唯一的一次】初始化global_variable_initializer（这句话的位置对于“一个会话图里包含哪些tf节点”是决定性的！）
5）使用threading运行多个线程，每个线程里喂进【不同的对象】，【同样的】sess